% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/tar_bookdown.R
\name{tar_bookdown}
\alias{tar_bookdown}
\title{Target factory for bookdown}
\usage{
tar_bookdown(
  input_dir = "report",
  input_files = ".",
  output_dir = NULL,
  output_format = NULL,
  preview = FALSE
)
}
\arguments{
\item{input_dir}{the main directory of the book}

\item{input_files}{character vector with input files, in case you do not
want to render them all (the default)}

\item{output_dir}{The output directory. If \code{NULL}, a field named
\code{output_dir} in the configuration file \file{_bookdown.yml} will be
used (possibly not specified, either, in which case a directory name
\file{_book} will be used).}

\item{preview}{Whether to render and preview the input files specified by the
\code{input} argument. Previewing a certain chapter may save compilation
time as you actively work on this chapter, but the output may not be
accurate (e.g. cross-references to other chapters will not work).}
}
\value{
a list of targets, including one target for each .Rmd file in
input_dir and one target for the bookdown output, that depends on all
.Rmd files
}
\description{
\code{{targets}} and \code{{tarchetypes}} make it straightforward to include individual
\href{https://books.ropensci.org/targets/files.html#literate-programming}{"dependency-aware R Markdown reports inside the individual targets of a pipeline"}
But a \code{{bookdown}}-based approach can be tricky. This function creates
targets to let you concisely (e.g. \code{tar_bookdown("report")}) include a
\code{bookdown} report in your pipeline, letting targets do its magic handling
dependencies.
}
\details{
So, this function
\itemize{
\item receives \code{input_dir}, typically a subfolder in your project that includes
all .Rmd files and \code{{bookdown}} config files
\item creates one target per .Rmd file in \code{input_dir}, making sure to include its
dependencies (e.g. tar_read, tar_load calls within .Rmd files, detected via
\code{tarchetypes::tar_knitr_deps})
\item includes also a single target for the \code{{bookdown}} report, that depends on
all the individual targets corresponding to .Rmd files
\item returns all the targets above as a list to be included in your pipeline
(please note all targets are format = "file")
}

Note that when running your pipeline, the bookdown target renders the book
using \code{flowme::bookme} which is simply a wrapper around
\code{bookdown::render_book} to deal with \code{{bookdown}}'s restrictions and  be able
to render in subdirectories. This collides with the stricter (compared to
.drake) policy of \code{{targets}} to find the data store (_targets/) at the
project root.

EDIT: now it seems \code{{targets}} is more flexible and you can
configure the location using \code{tar_config_set()}. Yet, the discussion below
still applies because we need to deal with temporarily changing working
directory to make bookdown work).

\code{flowme::bookme} changes working directory to \code{input_dir} to render the book.
Thus, when you call \code{tar_read} in an .Rmd, \code{{targets}} will look for the data
store in \code{input_dir} and not in your project root where it probably lies,
leading your pipeline to fail. To circumvent this issue, there are a few
alternatives you can use when retrieving targets in your .Rmd.
\itemize{
\item change the store directly to a hard-coded value, which is probably the less
verbose alternative, but it is not robust or portable (e.g. if you nest
the bookdown folder into other directories)
\itemize{
\item \code{tar_read(data, store = "..")}
}
\item also change the store, but using \code{here} to help you find the data store
\itemize{
\item \code{tar_read(data, store = here::here(targets::tar_config_get("store")))}
}
\item change the working directory again, temporarily
\itemize{
\item \code{xfun::in_dir(here::here(), tar_read(data))} # or withr::with_dir
}
\item TODO: there might be a better way to do it. Try and find it. Meanwhile,
this works.
}
}
\examples{
\dontrun{
tar_bookdown("report")
}
}
